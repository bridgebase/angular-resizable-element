{
  "version": 3,
  "file": "angular-resizable-element.umd.js",
  "sources": [
    "ng://angular-resizable-element/src/resizable.module.ts",
    "ng://angular-resizable-element/src/resize-handle.directive.ts",
    "ng://angular-resizable-element/src/resizable.directive.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective]\n})\nexport class ResizableModule {}\n",
    "import {\n  Directive,\n  Input,\n  HostListener,\n  Renderer2,\n  ElementRef,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * <div mwlResizable>\n *   <div mwlResizeHandle [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * </div>\n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]'\n})\nexport class ResizeHandleDirective implements OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n  } = {};\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    private resizable: ResizableDirective\n  ) {}\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchstart', [\n    '$event',\n    '$event.touches[0].clientX',\n    '$event.touches[0].clientY'\n  ])\n  @HostListener('mousedown', ['$event', '$event.clientX', '$event.clientY'])\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      if (!this.eventListeners.touchmove) {\n        this.eventListeners.touchmove = this.renderer.listen(\n          this.element.nativeElement,\n          'touchmove',\n          (touchMoveEvent: TouchEvent) => {\n            this.onMousemove(\n              touchMoveEvent,\n              touchMoveEvent.targetTouches[0].clientX,\n              touchMoveEvent.targetTouches[0].clientY\n            );\n          }\n        );\n      }\n      if (!this.eventListeners.mousemove) {\n        this.eventListeners.mousemove = this.renderer.listen(\n          this.element.nativeElement,\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.onMousemove(\n              mouseMoveEvent,\n              mouseMoveEvent.clientX,\n              mouseMoveEvent.clientY\n            );\n          }\n        );\n      }\n      this.resizable.mousedown.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchend', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('touchcancel', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('mouseup', ['$event.clientX', '$event.clientY'])\n  onMouseup(clientX: number, clientY: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.unsubscribeEventListeners();\n      this.resizable.mouseup.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(\n      (type: 'touchmove' | 'mousemove') => {\n        (this as any).eventListeners[type]();\n        delete this.eventListeners[type];\n      }\n    );\n  }\n}\n",
    "import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { merge } from 'rxjs/observable/merge';\nimport { interval } from 'rxjs/observable/interval';\nimport { map } from 'rxjs/operators/map';\nimport { mergeMap } from 'rxjs/operators/mergeMap';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { filter } from 'rxjs/operators/filter';\nimport { pairwise } from 'rxjs/operators/pairwise';\nimport { take } from 'rxjs/operators/take';\nimport { throttle } from 'rxjs/operators/throttle';\nimport { share } from 'rxjs/operators/share';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff < precision;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string,\n  scaledParent?: HTMLDivElement,\n  scale = 1.0\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform'\n  ];\n  const transform = transformProperties\n    .map(property => style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingClientRect = element.nativeElement.getBoundingClientRect();\n    let boundingRect: ClientRect;\n    if (scale !== 1.0) {\n      if (scaledParent) {\n        const parentClientRect = scaledParent.getBoundingClientRect();\n        boundingRect = {\n          bottom:\n            (boundingClientRect.bottom - parentClientRect.top) * 1 / scale,\n          top: (boundingClientRect.top - parentClientRect.top) * 1 / scale,\n          left: (boundingClientRect.left - parentClientRect.left) * 1 / scale,\n          right: (boundingClientRect.right - parentClientRect.left) * 1 / scale,\n          width: boundingClientRect.width * 1 / scale,\n          height: boundingClientRect.height * 1 / scale\n        };\n      } else {\n        // Allow consumers who's scaled ancestor is at 0,0 avoid passing it in\n        boundingRect = {\n          bottom: boundingClientRect.bottom * 1 / scale,\n          top: boundingClientRect.top * 1 / scale,\n          left: boundingClientRect.left * 1 / scale,\n          right: boundingClientRect.right * 1 / scale,\n          width: boundingClientRect.width * 1 / scale,\n          height: boundingClientRect.height * 1 / scale\n        };\n      }\n    } else {\n      boundingRect = boundingClientRect;\n    }\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY <= rect.bottom;\n}\n\nfunction isWithinBoundingX({\n  clientX,\n  rect\n}: {\n  clientX: number;\n  rect: ClientRect;\n}): boolean {\n  return clientX >= rect.left && clientX <= rect.right;\n}\n\nfunction getResizeEdges({\n  clientX,\n  clientY,\n  elm,\n  allowedEdges,\n  cursorPrecision\n}: {\n  clientX: number;\n  clientY: number;\n  elm: ElementRef;\n  allowedEdges: Edges;\n  cursorPrecision: number;\n}): Edges {\n  const elmPosition: ClientRect = elm.nativeElement.getBoundingClientRect();\n  const edges: Edges = {};\n\n  if (\n    allowedEdges.left &&\n    isNumberCloseTo(clientX, elmPosition.left, cursorPrecision) &&\n    isWithinBoundingY({ clientY, rect: elmPosition })\n  ) {\n    edges.left = true;\n  }\n\n  if (\n    allowedEdges.right &&\n    isNumberCloseTo(clientX, elmPosition.right, cursorPrecision) &&\n    isWithinBoundingY({ clientY, rect: elmPosition })\n  ) {\n    edges.right = true;\n  }\n\n  if (\n    allowedEdges.top &&\n    isNumberCloseTo(clientY, elmPosition.top, cursorPrecision) &&\n    isWithinBoundingX({ clientX, rect: elmPosition })\n  ) {\n    edges.top = true;\n  }\n\n  if (\n    allowedEdges.bottom &&\n    isNumberCloseTo(clientY, elmPosition.bottom, cursorPrecision) &&\n    isWithinBoundingX({ clientX, rect: elmPosition })\n  ) {\n    edges.bottom = true;\n  }\n\n  return edges;\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'ew-resize',\n  topOrBottom: 'ns-resize'\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge: string) => {\n    const typedEdge: keyof Edges = edge as keyof Edges;\n    edgesDiff[typedEdge] =\n      newRectangle[typedEdge] - initialRectangle[typedEdge];\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * <div\n *   mwlResizable\n *   [resizeEdges]=\"{bottom: true, right: true, top: true, left: true}\"\n *   [enableGhostResize]=\"true\">\n * </div>\n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Define a scale transform of an ancestor element\n   */\n  @Input() scale: number = 1.0;\n\n  /**\n   * A reference to the HTMLElement ancestor element\n   */\n  @Input() scaledParent: HTMLDivElement;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter<ResizeEvent>();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter<ResizeEvent>();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter<ResizeEvent>();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n  }>();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n  }>();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable<any> = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(throttle(() => interval(MOUSE_MOVE_THROTTLE_MS)))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable<any> = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return !!(\n            newBoundingRect.height &&\n            newBoundingRect.width &&\n            newBoundingRect.height > 0 &&\n            newBoundingRect.width > 0\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning,\n          this.scaledParent,\n          this.scale\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable<PointerEventCoordinate>;\n\n  public pointerMove: Observable<PointerEventCoordinate>;\n\n  public pointerUp: Observable<PointerEventCoordinate>;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n"
  ],
  "names": [
    "HostListener",
    "Directive",
    "Observable$1",
    "share$1",
    "Observable",
    "Input",
    "NgZone",
    "Renderer2",
    "filter$1",
    "map$1",
    "takeUntil$1",
    "merge$1",
    "take$1",
    "pairwise$1",
    "mergeMap$1",
    "throttle$1",
    "interval$1",
    "Subject",
    "Subject$1",
    "EventEmitter"
  ],
  "mappings": "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"
}
